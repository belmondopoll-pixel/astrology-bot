# handlers/paid_services.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import db
from keyboards import zodiac_keyboard, tarot_spreads_keyboard
from services.gemini_service import gemini_service
from services.tarot_deck import tarot_deck

logger = logging.getLogger(__name__)

router = Router()

class NatalChartStates(StatesGroup):
    waiting_birth_date = State()
    waiting_birth_time = State()
    waiting_birth_place = State()

# ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ====================

@router.message()
async def debug_paid_messages(message: Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥"""
    if message.text in ["üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (55 Stars)", "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é (333 Stars)", 
                       "üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ (888 Stars)", "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (999 Stars)"]:
        logger.info(f"üîç –ü–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ù–´–• –£–°–õ–£–ì ====================

@router.message(F.text == "üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (55 Stars)")
async def compatibility_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –í–´–ó–í–ê–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        await message.answer(
            "üíë <b>–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=zodiac_keyboard("compat_first")
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ compatibility_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("compat_first_"))
async def process_first_sign(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–∞"""
    try:
        await callback.answer()
        sign = callback.data.split("_")[2]
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–∞: {sign}")
        
        await state.update_data(first_sign=sign)
        
        await callback.message.edit_text(
            f"‚úÖ –ü–µ—Ä–≤—ã–π –∑–Ω–∞–∫: <b>{sign}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=zodiac_keyboard("compat_second")
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_first_sign: {e}")

@router.callback_query(F.data.startswith("compat_second_"))
async def process_second_sign(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞"""
    try:
        await callback.answer()
        second_sign = callback.data.split("_")[2]
        user_data = await state.get_data()
        first_sign = user_data.get('first_sign')
        user_id = callback.from_user.id
        
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞: {second_sign}, –ø–µ—Ä–≤—ã–π: {first_sign}")
        
        if not first_sign:
            await callback.message.edit_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        await callback.message.edit_text(
            f"üíë <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è {first_sign} –∏ {second_sign}...</b>\n\n"
            f"<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É
        compatibility_text = await gemini_service.generate_compatibility(first_sign, second_sign)
        
        await callback.message.edit_text(
            f"üíë <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {first_sign} –∏ {second_sign}</b>\n\n"
            f"{compatibility_text}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 55 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(user_id, f"compatibility_{first_sign}_{second_sign}", 55)
        logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_second_sign: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(F.text == "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é (333 Stars)")
async def weekly_horoscope_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –í–´–ó–í–ê–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        await message.answer(
            "üìÖ <b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=zodiac_keyboard("weekly_paid")
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ weekly_horoscope_handler: {e}")

@router.callback_query(F.data.startswith("weekly_paid_"))
async def process_weekly_horoscope(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        await callback.answer()
        zodiac_sign = callback.data.split("_")[2]
        user_id = callback.from_user.id
        
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è: {zodiac_sign}")
        
        await callback.message.edit_text(
            f"üìÖ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}...</b>\n\n"
            f"<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É
        horoscope_text = await gemini_service.generate_weekly_horoscope(zodiac_sign)
        
        await callback.message.edit_text(
            f"üìÖ <b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}</b>\n\n"
            f"{horoscope_text}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 333 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(user_id, f"weekly_horoscope_{zodiac_sign}", 333)
        logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_weekly_horoscope: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(F.text == "üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ (888 Stars)")
async def tarot_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ"""
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–∞—Ä–æ –í–´–ó–í–ê–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        await message.answer(
            "üÉè <b>–†–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:",
            reply_markup=tarot_spreads_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tarot_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("tarot_"))
async def process_tarot_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ"""
    try:
        await callback.answer()
        spread_type = callback.data.split("_")[1]
        user_id = callback.from_user.id
        
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–∞—Ä–æ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞: {spread_type}")
        
        spread_names = {
            "celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            "three": "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ", 
            "four": "–°–∏—Ç—É–∞—Ü–∏—è-–í—ã–∑–æ–≤—ã-–°–æ–≤–µ—Ç-–†–µ–∑—É–ª—å—Ç–∞—Ç",
            "daily": "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
        }
        
        spread_name = spread_names.get(spread_type, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")
        
        await callback.message.edit_text(
            f"üÉè <b>–ì–æ—Ç–æ–≤–ª—é —Ä–∞—Å–∫–ª–∞–¥ '{spread_name}'...</b>\n\n"
            f"<em>–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–∞—Ä—Ç—ã...</em>"
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É
        cards, positions = tarot_deck.create_spread(spread_type)
        
        spread_description = ""
        for i, card in enumerate(cards):
            position_name = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
            orientation = "–ø—Ä—è–º–æ–µ" if card["position"] == "upright" else "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ"
            spread_description += f"{position_name}: {card['name']} ({orientation})\n"
        
        interpretation = await gemini_service.generate_tarot_reading(spread_type, spread_description)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cards_text = "üé¥ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥:\n\n"
        for i, card in enumerate(cards):
            position_name = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
            orientation = "üîº" if card["position"] == "upright" else "üîΩ"
            cards_text += f"{orientation} <b>{position_name}:</b>\n"
            cards_text += f"   üÉè {card['name']}\n"
            cards_text += f"   üìñ {tarot_deck.get_card_meaning(card)}\n\n"
        
        full_content = f"{cards_text}\nüí´ <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n\n{interpretation}"
        
        await callback.message.edit_text(
            f"üÉè <b>{spread_name}</b>\n\n"
            f"{full_content}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 888 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(user_id, f"tarot_{spread_type}", 888)
        logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –¢–∞—Ä–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tarot_spread: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(F.text == "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (999 Stars)")
async def natal_chart_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –í–´–ó–í–ê–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        await message.answer(
            "üåå <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
            "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n"
            "1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú)\n" 
            "3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞)\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        
        await state.set_state(NatalChartStates.waiting_birth_date)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ natal_chart_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(NatalChartStates.waiting_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = message.text.strip()
    
    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}")
    
    if not await validate_date_format(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990):")
        return

    await state.update_data(birth_date=birth_date)
    await state.set_state(NatalChartStates.waiting_birth_time)
    await message.answer("‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

@router.message(NatalChartStates.waiting_birth_time)
async def process_birth_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_time = message.text.strip()
    
    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}")
    
    if not await validate_time_format(birth_time):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        return

    await state.update_data(birth_time=birth_time)
    await state.set_state(NatalChartStates.waiting_birth_place)
    await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞):")

@router.message(NatalChartStates.waiting_birth_place)
async def process_birth_place(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_place = message.text.strip()
    user_id = message.from_user.id
    user_data = await state.get_data()
    
    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_place}")
    
    if not birth_place:
        await message.answer("‚ùå –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")
        return

    generating_msg = await message.answer(
        f"üåå <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...</b>\n\n"
        f"<em>–î–∞—Ç–∞: {user_data.get('birth_date')}\n"
        f"–í—Ä–µ–º—è: {user_data.get('birth_time')}\n"
        f"–ú–µ—Å—Ç–æ: {birth_place}</em>\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É
    birth_data = {
        'birth_date': user_data.get('birth_date'),
        'birth_time': user_data.get('birth_time'), 
        'birth_place': birth_place
    }
    
    natal_chart_text = await gemini_service.generate_natal_chart_interpretation(birth_data)
    
    await generating_msg.edit_text(
        f"üåå <b>–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ:</b>\n"
        f"üìÖ –î–∞—Ç–∞: {user_data.get('birth_date')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {user_data.get('birth_time')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {birth_place}\n\n"
        f"{natal_chart_text}\n\n"
        f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 999 Stars</i>"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    db.log_request(user_id, "natal_chart", 999)
    logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    await state.clear()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def validate_date_format(date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    try:
        parts = date_str.split('.')
        if len(parts) != 3:
            return False
        day, month, year = parts
        if len(day) != 2 or len(month) != 2 or len(year) != 4:
            return False
        int(day), int(month), int(year)
        return True
    except:
        return False

async def validate_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        parts = time_str.split(':')
        if len(parts) != 2:
            return False
        hour, minute = parts
        if len(hour) != 2 or len(minute) != 2:
            return False
        h, m = int(hour), int(minute)
        if h < 0 or h > 23 or m < 0 or m > 59:
            return False
        return True
    except:
        return False