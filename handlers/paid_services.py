# paid_services.py - –î–û–ë–ê–í–¨–¢–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, SuccessfulPayment, LabeledPrice
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import db
from keyboards import zodiac_keyboard, tarot_spreads_keyboard, main_menu
from services.gemini_service import gemini_service
from services.tarot_deck import tarot_deck
from utils.message_utils import split_message

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
class CompatibilityStates(StatesGroup):
    waiting_for_second_sign = State()

class WeeklyHoroscopeStates(StatesGroup):
    waiting_for_sign = State()

class NatalChartStates(StatesGroup):
    waiting_birth_date = State()
    waiting_birth_time = State()
    waiting_birth_place = State()

class TarotStates(StatesGroup):
    waiting_for_spread = State()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –° –†–ï–ê–õ–¨–ù–´–ú–ò –ü–õ–ê–¢–ï–ñ–ê–ú–ò ====================

@router.message(F.text == "üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (55 Stars)")
async def compatibility_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π"""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(label="–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", amount=55)]
        
        logger.info(f"üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="üíë –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
            description="–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞",
            payload="compatibility_payment",
            provider_token="",  # –î–ª—è Stars –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            currency="XTR",  # Telegram Stars
            prices=prices,
            start_parameter="compatibility"
        )
        
        await state.update_data(service_type="compatibility")
        logger.info(f"‚úÖ –ò–Ω–≤–æ–π—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ compatibility_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é (333 Stars)")
async def weekly_horoscope_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π"""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(label="–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é", amount=333)]
        
        logger.info(f"üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é",
            description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 7 –¥–Ω–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏",
            payload="weekly_horoscope_payment",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="weekly_horoscope"
        )
        
        await state.update_data(service_type="weekly_horoscope")
        logger.info(f"‚úÖ –ò–Ω–≤–æ–π—Å –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ weekly_horoscope_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ (888 Stars)")
async def tarot_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π"""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–∞—Ä–æ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(label="–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", amount=888)]
        
        logger.info(f"üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –¢–∞—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ",
            description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π",
            payload="tarot_payment",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="tarot"
        )
        
        await state.update_data(service_type="tarot")
        logger.info(f"‚úÖ –ò–Ω–≤–æ–π—Å –¥–ª—è –¢–∞—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tarot_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (999 Stars)")
async def natal_chart_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π"""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(label="–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", amount=999)]
        
        logger.info(f"üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
            description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º",
            payload="natal_chart_payment",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="natal_chart"
        )
        
        await state.update_data(service_type="natal_chart")
        logger.info(f"‚úÖ –ò–Ω–≤–æ–π—Å –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ natal_chart_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    logger.info(f"üîÑ Pre-checkout –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pre_checkout_query.from_user.id}")
    await pre_checkout_query.answer(ok=True)
    logger.info(f"‚úÖ Pre-checkout –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        payment = message.successful_payment
        user_id = message.from_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏ –ø–æ payload
        payload = payment.invoice_payload
        amount = payment.total_amount // 100  # Convert from cents
        
        logger.info(f"üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {user_id} -> {payload} –∑–∞ {amount} Stars")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO payments (user_id, service_type, amount_stars, status, payment_data)
                VALUES (?, ?, ?, 'completed', ?)
            ''', (user_id, payload, amount, str(payment)))
            conn.commit()
        
        logger.info(f"üìä –ü–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if payload == "compatibility_payment":
            await message.answer(
                "üíë <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:",
                reply_markup=zodiac_keyboard("compatibility_first_paid")
            )
            logger.info(f"‚úÖ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        elif payload == "weekly_horoscope_payment":
            await message.answer(
                "üìÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:",
                reply_markup=zodiac_keyboard("weekly_horoscope_paid")
            )
            logger.info(f"‚úÖ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        elif payload == "tarot_payment":
            await message.answer(
                "üÉè <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ:",
                reply_markup=tarot_spreads_keyboard()
            )
            logger.info(f"‚úÖ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¢–∞—Ä–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        elif payload == "natal_chart_payment":
            await message.answer(
                "üåå <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n"
                "1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
                "2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú)\n" 
                "3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞)\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            await state.set_state(NatalChartStates.waiting_birth_date)
            logger.info(f"‚úÖ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        await state.update_data(paid_service=payload)
        logger.info(f"üéâ –£—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ successful_payment_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
@router.callback_query(F.data.startswith("compatibility_first_paid_"))
async def process_first_sign_paid(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        await callback.answer()
        
        first_sign = callback.data.split("_")[3]
        await state.update_data(first_sign=first_sign)
        
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫: {first_sign}")
        
        await callback.message.edit_text(
            f"‚úÖ –ü–µ—Ä–≤—ã–π –∑–Ω–∞–∫: <b>{first_sign}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=zodiac_keyboard("compatibility_second_paid")
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_first_sign_paid: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞")

@router.callback_query(F.data.startswith("compatibility_second_paid_"))
async def process_second_sign_paid(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        await callback.answer()
        
        second_sign = callback.data.split("_")[3]
        user_data = await state.get_data()
        first_sign = user_data.get('first_sign')
        user_id = callback.from_user.id
        
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫: {second_sign}")
        
        if not first_sign:
            await callback.message.edit_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        await callback.message.edit_text(
            f"üíë <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è {first_sign} –∏ {second_sign}...</b>\n\n"
            f"<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É
        compatibility_text = await gemini_service.generate_compatibility(first_sign, second_sign)
        
        await callback.message.edit_text(
            f"üíë <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {first_sign} –∏ {second_sign}</b>\n\n"
            f"{compatibility_text}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 55 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(user_id, f"compatibility_{first_sign}_{second_sign}", 55)
        logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_second_sign_paid: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.callback_query(F.data.startswith("weekly_horoscope_paid_"))
async def process_weekly_horoscope_paid(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        await callback.answer()
        
        zodiac_sign = callback.data.split("_")[3]
        user_id = callback.from_user.id
        
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {zodiac_sign} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        await callback.message.edit_text(
            f"üìÖ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}...</b>\n\n"
            f"<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É
        horoscope_text = await gemini_service.generate_weekly_horoscope(zodiac_sign)
        
        await callback.message.edit_text(
            f"üìÖ <b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}</b>\n\n"
            f"{horoscope_text}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 333 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(user_id, f"weekly_horoscope_{zodiac_sign}", 333)
        logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_weekly_horoscope_paid: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("tarot_"))
async def process_tarot_spread_paid(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    try:
        await callback.answer()
        
        spread_type = callback.data.split("_")[1]
        user_id = callback.from_user.id
        
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ {spread_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        spread_names = {
            "celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            "three": "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ", 
            "four": "–°–∏—Ç—É–∞—Ü–∏—è-–í—ã–∑–æ–≤—ã-–°–æ–≤–µ—Ç-–†–µ–∑—É–ª—å—Ç–∞—Ç",
            "daily": "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
        }
        
        spread_name = spread_names.get(spread_type, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")
        
        await callback.message.edit_text(
            f"üÉè <b>–ì–æ—Ç–æ–≤–ª—é —Ä–∞—Å–∫–ª–∞–¥ '{spread_name}'...</b>\n\n"
            f"<em>–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–∞—Ä—Ç—ã...</em>"
        )
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É
        cards, positions = tarot_deck.create_spread(spread_type)
        
        spread_description = ""
        for i, card in enumerate(cards):
            position_name = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
            orientation = "–ø—Ä—è–º–æ–µ" if card["position"] == "upright" else "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ"
            spread_description += f"{position_name}: {card['name']} ({orientation})\n"
        
        interpretation = await gemini_service.generate_tarot_reading(spread_type, spread_description)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cards_text = "üé¥ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥:\n\n"
        for i, card in enumerate(cards):
            position_name = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
            orientation = "üîº" if card["position"] == "upright" else "üîΩ"
            cards_text += f"{orientation} <b>{position_name}:</b>\n"
            cards_text += f"   üÉè {card['name']}\n"
            cards_text += f"   üìñ {tarot_deck.get_card_meaning(card)}\n\n"
        
        full_content = f"{cards_text}\nüí´ <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n\n{interpretation}"
        
        await callback.message.edit_text(
            f"üÉè <b>{spread_name}</b>\n\n"
            f"{full_content}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 888 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(user_id, f"tarot_{spread_type}", 888)
        logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –¢–∞—Ä–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_tarot_spread_paid: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã (—É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π)
@router.message(NatalChartStates.waiting_birth_date)
async def process_birth_date_paid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    birth_date = message.text.strip()
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {birth_date}")
    
    if not await validate_date_format(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990):")
        return

    await state.update_data(birth_date=birth_date)
    await state.set_state(NatalChartStates.waiting_birth_time)
    await message.answer("‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

@router.message(NatalChartStates.waiting_birth_time)
async def process_birth_time_paid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    birth_time = message.text.strip()
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {birth_time}")
    
    if not await validate_time_format(birth_time):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        return

    await state.update_data(birth_time=birth_time)
    await state.set_state(NatalChartStates.waiting_birth_place)
    await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞):")

@router.message(NatalChartStates.waiting_birth_place)
async def process_birth_place_paid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    birth_place = message.text.strip()
    user_id = message.from_user.id
    user_data = await state.get_data()
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {birth_place}")
    
    if not birth_place:
        await message.answer("‚ùå –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")
        return

    await state.update_data(birth_place=birth_place)
    
    birth_date = user_data.get('birth_date')
    birth_time = user_data.get('birth_time')

    generating_msg = await message.answer(
        f"üåå <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...</b>\n\n"
        f"<em>–î–∞—Ç–∞: {birth_date}\n"
        f"–í—Ä–µ–º—è: {birth_time}\n"
        f"–ú–µ—Å—Ç–æ: {birth_place}</em>\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É
    birth_data = {
        'birth_date': birth_date,
        'birth_time': birth_time, 
        'birth_place': birth_place
    }
    
    natal_chart_text = await gemini_service.generate_natal_chart_interpretation(birth_data)
    
    await generating_msg.edit_text(
        f"üåå <b>–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ:</b>\n"
        f"üìÖ –î–∞—Ç–∞: {birth_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {birth_time}\n"
        f"üìç –ú–µ—Å—Ç–æ: {birth_place}\n\n"
        f"{natal_chart_text}\n\n"
        f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 999 Stars</i>"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    db.log_request(user_id, "natal_chart", 999)
    logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    await state.clear()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def validate_date_format(date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    try:
        parts = date_str.split('.')
        if len(parts) != 3:
            return False
        day, month, year = parts
        if len(day) != 2 or len(month) != 2 or len(year) != 4:
            return False
        int(day), int(month), int(year)
        return True
    except:
        return False

async def validate_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        parts = time_str.split(':')
        if len(parts) != 2:
            return False
        hour, minute = parts
        if len(hour) != 2 or len(minute) != 2:
            return False
        h, m = int(hour), int(minute)
        if h < 0 or h > 23 or m < 0 or m > 59:
            return False
        return True
    except:
        return False