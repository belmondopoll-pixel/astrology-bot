# paid_services.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, SuccessfulPayment
from aiogram.fsm.context import FSMContext
import logging

from database import db
from keyboards import zodiac_keyboard, tarot_spreads_keyboard, main_menu
from services.gemini_service import gemini_service
from services.stars_payment_service import stars_payment_service

logger = logging.getLogger(__name__)

router = Router()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ====================

@router.message(F.text == "üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (55 Stars)")
async def compatibility_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–≤–æ–π—Å–∞"""
    try:
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        invoice = stars_payment_service.get_invoice("compatibility")
        
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title=invoice["title"],
            description=invoice["description"],
            payload=invoice["payload"],
            provider_token="",  # –î–ª—è Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            currency=invoice["currency"],
            prices=invoice["prices"],
            start_parameter=invoice["start_parameter"]
        )
        
        await state.update_data(service_type="compatibility")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ compatibility_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é (333 Stars)")
async def weekly_horoscope_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–≤–æ–π—Å–∞"""
    try:
        user_id = message.from_user.id
        
        await message.answer(
            "üìÖ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:",
            reply_markup=zodiac_keyboard("weekly_invoice")
        )
            
        await state.update_data(service_type="weekly_horoscope")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ weekly_horoscope_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("weekly_invoice_"))
async def create_weekly_invoice(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        await callback.answer()
        
        zodiac_sign = callback.data.split("_")[2]
        user_data = {"zodiac_sign": zodiac_sign}
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        invoice = stars_payment_service.get_invoice("weekly_horoscope", user_data)
        
        await callback.message.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title=invoice["title"],
            description=f"{invoice['description']} –¥–ª—è {zodiac_sign}",
            payload=invoice["payload"],
            provider_token="",
            currency=invoice["currency"],
            prices=invoice["prices"],
            start_parameter=invoice["start_parameter"]
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_weekly_invoice: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¢–∞—Ä–æ –∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ù–´–• –°–û–ë–´–¢–ò–ô ====================

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment = message.successful_payment
        user_id = message.from_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        success = await stars_payment_service.process_successful_payment(
            user_id, payment.invoice_payload, payment.total_amount
        )
        
        if success:
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É
            await provide_paid_service(user_id, payment.invoice_payload, message, state)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ successful_payment_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

async def provide_paid_service(user_id: int, payload: str, message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    try:
        parts = payload.split("_")
        service_type = parts[0]
        
        if service_type == "compatibility":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
            await message.answer(
                "üíë <b>–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=zodiac_keyboard("comp_first")
            )
        elif service_type == "weekly_horoscope":
            zodiac_sign = parts[1] if len(parts) > 1 else None
            if zodiac_sign:
                await generate_weekly_horoscope(message, zodiac_sign)
            else:
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                    reply_markup=zodiac_keyboard("weekly_paid")
                )
        # ... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏.")

async def generate_weekly_horoscope(message: Message, zodiac_sign: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    generating_msg = await message.answer(
        f"üìÖ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}...</b>\n\n"
        f"<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
    )
    
    try:
        horoscope_text = await gemini_service.generate_weekly_horoscope(zodiac_sign)
        
        await generating_msg.edit_text(
            f"üìÖ <b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}</b>\n\n"
            f"{horoscope_text}\n\n"
            f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 333 Stars</i>"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(message.from_user.id, f"weekly_horoscope_{zodiac_sign}", 333)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        await generating_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.")