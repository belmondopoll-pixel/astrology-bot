# handlers/payment_handlers.py
from aiogram import Router, F
from aiogram.types import Message, PreCheckoutQuery, SuccessfulPayment
from aiogram.filters import Command
import logging

from database import db
from services.stars_payment_service import stars_payment_service
from services.gemini_service import gemini_service
from services.tarot_deck import tarot_deck

logger = logging.getLogger(__name__)

router = Router()

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    try:
        # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout –¥–ª—è Telegram Stars
        await pre_checkout_query.answer(ok=True)
        logger.info(f"‚úÖ Pre-checkout –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {pre_checkout_query.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ pre-checkout: {e}")
        await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment = message.successful_payment
        user_id = message.from_user.id
        
        logger.info(f"üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment.total_amount} Stars –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å–µ—Ä–≤–∏—Å–µ
        success = await stars_payment_service.process_successful_payment(
            user_id, 
            payment.invoice_payload, 
            payment.total_amount
        )
        
        if success:
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            await provide_paid_service(user_id, payment.invoice_payload, message)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def provide_paid_service(user_id: int, payload: str, message: Message):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    try:
        parts = payload.split("_")
        service_type = parts[0]
        
        if service_type == "compatibility":
            if len(parts) >= 3:
                sign1 = parts[1]
                sign2 = parts[2]
                compatibility_text = await gemini_service.generate_compatibility(sign1, sign2)
                
                await message.answer(
                    f"üíë <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {sign1} –∏ {sign2}</b>\n\n"
                    f"{compatibility_text}\n\n"
                    f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 55 Stars</i>"
                )
                
        elif service_type == "weekly_horoscope":
            if len(parts) >= 2:
                zodiac_sign = parts[1]
                horoscope_text = await gemini_service.generate_weekly_horoscope(zodiac_sign)
                
                await message.answer(
                    f"üìÖ <b>–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}</b>\n\n"
                    f"{horoscope_text}\n\n"
                    f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 333 Stars</i>"
                )
                
        elif service_type == "tarot":
            if len(parts) >= 2:
                spread_type = parts[1]
                
                spread_names = {
                    "celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
                    "three": "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ", 
                    "four": "–°–∏—Ç—É–∞—Ü–∏—è-–í—ã–∑–æ–≤—ã-–°–æ–≤–µ—Ç-–†–µ–∑—É–ª—å—Ç–∞—Ç",
                    "daily": "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
                }
                
                spread_name = spread_names.get(spread_type, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")
                
                cards, positions = tarot_deck.create_spread(spread_type)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cards_text = "üé¥ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥:\n\n"
                for i, card in enumerate(cards):
                    position_name = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
                    orientation = "üîº" if card["position"] == "upright" else "üîΩ"
                    cards_text += f"{orientation} <b>{position_name}:</b>\n"
                    cards_text += f"   üÉè {card['name']}\n"
                    cards_text += f"   üìñ {tarot_deck.get_card_meaning(card)}\n\n"
                
                interpretation = await gemini_service.generate_tarot_reading(spread_type, "")
                
                full_content = f"{cards_text}\nüí´ <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n\n{interpretation}"
                
                await message.answer(
                    f"üÉè <b>{spread_name}</b>\n\n"
                    f"{full_content}\n\n"
                    f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 888 Stars</i>"
                )
                
        elif service_type == "natal":
            # –î–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ
            natal_chart_text = await gemini_service.generate_natal_chart_interpretation({})
            
            await message.answer(
                f"üåå <b>–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
                f"{natal_chart_text}\n\n"
                f"<i>‚úÖ –£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚Ä¢ 999 Stars</i>"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(Command("balance"))
async def check_balance(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Stars"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å Stars –∏–∑ Telegram
    await message.answer(
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å Telegram Stars</b>\n\n"
        f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ Stars –æ—Ç–∫—Ä–æ–π—Ç–µ:\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí Telegram Stars\n"
        f"‚Ä¢ –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n\n"
        f"üí° Stars –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –∫—É–ø–∏—Ç—å –≤ Telegram"
    )