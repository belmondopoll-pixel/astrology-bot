from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, WebAppData, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
import logging

from database import db
from keyboards import main_menu, zodiac_keyboard, web_app_keyboard, get_webapp_url
from services.gemini_service import gemini_service
from services.miniapp_service import miniapp_service
from services.balance_service import balance_service
from services.payment_service import payment_service

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥
from .paid_services import router as paid_router

router = Router()
# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥
router.include_router(paid_router)

logger = logging.getLogger(__name__)

class UserStates(StatesGroup):
    waiting_for_zodiac = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    welcome_text = """
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Å—Ç—Ä–æ–ë–æ—Ç!</b> üåü

–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

<b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>
‚ôà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
üìö –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏

<b>–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ (Telegram Stars):</b>
üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞ - 55 –∑–≤—ë–∑–¥
üìÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é - 333 –∑–≤—ë–∑–¥  
üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π - 999 –∑–≤—ë–∑–¥
üÉè –†–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ - 888 –∑–≤—ë–∑–¥

üì± <b>–ù–æ–≤–æ–µ!</b> –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ —É–¥–æ–±–Ω–æ–µ MiniApp —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º!
    """
    
    await message.answer(welcome_text, reply_markup=main_menu())

@router.message(F.text == "üì± –û—Ç–∫—Ä—ã—Ç—å MiniApp")
async def open_miniapp_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è MiniApp"""
    
    await message.answer(
        "üöÄ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ MiniApp...</b>\n\n"
        "–ï—Å–ª–∏ MiniApp –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, "
        "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=web_app_keyboard()
    )

@router.message(F.text == "‚ôà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")
async def daily_horoscope_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    db.log_request(message.from_user.id, "daily_horoscope")
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        reply_markup=zodiac_keyboard("horoscope")
    )

@router.callback_query(F.data.startswith("horoscope_"))
async def process_zodiac_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    
    # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–í–ï–¢ –ù–ê CALLBACK
    await callback.answer()
    
    zodiac_sign = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_zodiac(callback.from_user.id, zodiac_sign)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_msg = await callback.message.edit_text(
        f"‚ôà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign}...\n\n<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø —á–µ—Ä–µ–∑ Gemini
        horoscope_text = await gemini_service.safe_generate_horoscope(zodiac_sign)
        
        final_text = f"‚ôà <b>–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign}</b>\n\n{horoscope_text}"
        
        await callback.message.edit_text(final_text)
        
    except Exception as e:
        error_text = f"""
‚ôà <b>–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign}</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

<em>–û—à–∏–±–∫–∞: {str(e)}</em>
        """
        await callback.message.edit_text(error_text)

@router.message(F.text == "üìö –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def general_info_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    info_text = """
<b>üìö –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏</b>

<b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è</b> - —ç—Ç–æ –¥—Ä–µ–≤–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–Ω–∏–π, –∏–∑—É—á–∞—é—â–∞—è –≤–ª–∏—è–Ω–∏–µ –Ω–µ–±–µ—Å–Ω—ã—Ö —Ç–µ–ª –Ω–∞ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞.

<b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b> - —ç—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ –º–æ–º–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è. –û–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
‚Ä¢ –í–∞—à–∏ –≤—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è

<b>–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ</b> - —Å–∏—Å—Ç–µ–º–∞ —Å–∏–º–≤–æ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –≥–∞–¥–∞–Ω–∏—è –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã:
‚Ä¢ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
‚Ä¢ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã - –ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ
‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–Ω—è - —Å–æ–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É –≤ –º–µ–Ω—é.
    """
    
    await message.answer(info_text)

@router.message(Command("app"))
async def cmd_app(message: Message):
    """–û—Ç–∫—Ä—ã—Ç—å MiniApp —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    await message.answer(
        f"üì± <b>MiniApp –¥–ª—è –ê—Å—Ç—Ä–æ–ë–æ—Ç–∞</b>\n\n"
        f"URL: {get_webapp_url()}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–∫—Ä—ã—Ç—å MiniApp' –≤ –º–µ–Ω—é "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=web_app_keyboard()
    )

@router.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MiniApp"""
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ MiniApp: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ MiniApp
        action = data.get('action')
        
        if action == 'sync_user_data':
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            zodiac_sign = data.get('zodiac_sign')
            if zodiac_sign:
                db.update_user_zodiac(user_id, zodiac_sign)
                await message.answer(f"‚úÖ –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {zodiac_sign}")
                
        elif action == 'get_balance':
            # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
            balance = await balance_service.get_balance(user_id)
            await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥")
            
        elif action == 'process_service':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª—É–≥–∏ –∏–∑ MiniApp
            service_type = data.get('service_type')
            service_data = data.get('data', {})
            
            result = await miniapp_service.process_miniapp_request(
                user_id,
                service_type,
                service_data
            )
            
            if result['success']:
                await message.answer(f"‚úÖ {service_type} –≤—ã–ø–æ–ª–Ω–µ–Ω! –°—Ç–æ–∏–º–æ—Å—Ç—å: {result['cost']} –∑–≤—ë–∑–¥\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result['new_balance']} –∑–≤–µ–∑–¥")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        else:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ MiniApp –ø–æ–ª—É—á–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MiniApp")

@router.message(F.text == "üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def add_balance_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    balance = await balance_service.get_balance(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï 100 –∑–≤–µ–∑–¥", callback_data="deposit_100"),
                InlineKeyboardButton(text="‚ûï 500 –∑–≤–µ–∑–¥", callback_data="deposit_500")
            ],
            [
                InlineKeyboardButton(text="‚ûï 1000 –∑–≤–µ–∑–¥", callback_data="deposit_1000"),
                InlineKeyboardButton(text="üí≥ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="deposit_custom")
            ],
            [
                InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="balance_history")
            ]
        ]
    )
    
    await message.answer(
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} –∑–≤–µ–∑–¥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("deposit_"))
async def process_deposit(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–í–ï–¢ –ù–ê CALLBACK
        await callback.answer()
        
        data = callback.data
        user_id = callback.from_user.id
        
        if data == "deposit_custom":
            await callback.message.answer(
                "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –∑–≤–µ–∑–¥–∞—Ö (–æ—Ç 10 –¥–æ 5000):"
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
        amount = int(data.split("_")[1])
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        if await payment_service.add_funds(user_id, amount):
            new_balance = await balance_service.get_balance(user_id)
            await callback.message.edit_text(
                f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üí´ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{amount} –∑–≤–µ–∑–¥\n"
                f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –∑–≤–µ–∑–¥"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deposit: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

@router.callback_query(F.data == "balance_history")
async def show_balance_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–í–ï–¢ –ù–ê CALLBACK
        await callback.answer()
        
        user_id = callback.from_user.id
        history = db.get_user_requests(user_id, limit=10)
        
        if not history:
            await callback.message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
            return
            
        history_text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n"
        
        for i, req in enumerate(history, 1):
            service_type = req[0]
            date = req[1]
            cost = req[2] if len(req) > 2 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏
            if "compatibility" in service_type:
                service_name = "üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
                cost = 55
            elif "weekly_horoscope" in service_type:
                service_name = "üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø" 
                cost = 333
            elif "tarot" in service_type:
                service_name = "üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ"
                cost = 888
            elif "natal_chart" in service_type:
                service_name = "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
                cost = 999
            elif "daily_horoscope" in service_type:
                service_name = "‚ôà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"
                cost = 0
            else:
                service_name = service_type
                
            history_text += f"{i}. {service_name} - {cost} –∑–≤–µ–∑–¥\n"
            history_text += f"   üìÖ {date}\n\n"
        
        await callback.message.answer(history_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@router.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def balance_handler(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = await balance_service.get_balance_stats(message.from_user.id)
    
    balance_text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

‚≠ê <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {stats['balance']} –∑–≤–µ–∑–¥
üìà <b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</b> {stats['total_earned']} –∑–≤–µ–∑–¥
üìâ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {stats['total_spent']} –∑–≤–µ–∑–¥

üí° –ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - 55 –∑–≤–µ–∑–¥
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø - 333 –∑–≤–µ–∑–¥
‚Ä¢ –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ - 888 –∑–≤–µ–∑–¥
‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ - 999 –∑–≤–µ–∑–¥
    """
    
    await message.answer(balance_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.message(F.text.regexp(r'^\d+$'))
async def process_custom_deposit(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = int(message.text)
        user_id = message.from_user.id
        
        if amount < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10 –∑–≤–µ–∑–¥")
            return
            
        if amount > 5000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 5000 –∑–≤–µ–∑–¥")
            return
            
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        if await payment_service.add_funds(user_id, amount):
            new_balance = await balance_service.get_balance(user_id)
            await message.answer(
                f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üí´ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{amount} –∑–≤–µ–∑–¥\n"
                f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –∑–≤–µ–∑–¥"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")