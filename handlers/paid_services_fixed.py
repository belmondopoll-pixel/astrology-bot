from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import db
from keyboards import zodiac_keyboard, tarot_spreads_keyboard
from services.gemini_service import gemini_service
from services.payment_service import payment_service
from services.tarot_deck import tarot_deck
from utils.message_utils import split_message

logger = logging.getLogger(__name__)

# –°–û–ó–î–ê–ï–ú –†–û–£–¢–ï–† –î–õ–Ø –ü–õ–ê–¢–ù–´–• –£–°–õ–£–ì
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
class CompatibilityStates(StatesGroup):
    waiting_for_second_sign = State()

class WeeklyHoroscopeStates(StatesGroup):
    waiting_for_user_data = State()

class NatalChartStates(StatesGroup):
    waiting_birth_date = State()
    waiting_birth_time = State()
    waiting_birth_place = State()

class TarotStates(StatesGroup):
    waiting_for_spread = State()
    waiting_for_question = State()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ù–´–• –£–°–õ–£–ì ====================

@router.message(F.text == "üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (50 –∑–≤—ë–∑–¥)")
async def compatibility_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        invoice = await payment_service.create_invoice(
            message.from_user.id,
            "compatibility",
            "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞"
        )
        
        await message.answer(
            f"üíë <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞</b>\n\n"
            f"{invoice['instructions']}\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=zodiac_keyboard("compatibility_first")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ compatibility_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("compatibility_first_"))
async def process_first_sign(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        first_sign = callback.data.split("_")[2]
        
        await state.update_data(first_sign=first_sign)
        await state.set_state(CompatibilityStates.waiting_for_second_sign)
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫: <b>{first_sign}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
            reply_markup=zodiac_keyboard("compatibility_second")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_first_sign: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞")

@router.callback_query(F.data.startswith("compatibility_second_"))
async def process_second_sign(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        second_sign = callback.data.split("_")[2]
        user_data = await state.get_data()
        first_sign = user_data.get('first_sign')
        
        if not first_sign:
            await callback.message.edit_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
        if await payment_service.process_payment(callback.from_user.id, "compatibility"):
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            db.log_request(callback.from_user.id, "compatibility")
            
            await callback.message.edit_text(
                f"üíë –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è <b>{first_sign}</b> –∏ <b>{second_sign}</b>...\n\n"
                "<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
            )
            
            try:
                compatibility_text = await gemini_service.generate_compatibility(first_sign, second_sign)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                header = f"üíë <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {first_sign} –∏ {second_sign}</b>\n\n"
                footer = "\n\n<i>–£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ (50 –∑–≤—ë–∑–¥)</i>"
                
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                first_part = header + compatibility_text[:4000 - len(header + footer)] + footer
                await callback.message.edit_text(first_part)
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                if len(compatibility_text) > 4000:
                    remaining_text = compatibility_text[4000 - len(header + footer):]
                    message_parts = split_message(remaining_text, 4000)
                    
                    for part in message_parts:
                        await callback.message.answer(part)
                
            except Exception as e:
                error_text = (
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n\n"
                    f"<em>–û—à–∏–±–∫–∞: {str(e)}</em>\n\n"
                    f"–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã."
                )
                await callback.message.edit_text(error_text)
        else:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 50 Telegram Stars.\n"
                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_second_sign: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    await callback.answer()

@router.message(F.text == "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é (100 –∑–≤—ë–∑–¥)")
async def weekly_horoscope_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        await message.answer(
            "üìÖ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:",
            reply_markup=zodiac_keyboard("weekly_horoscope")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ weekly_horoscope_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("weekly_horoscope_"))
async def process_weekly_horoscope(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    try:
        zodiac_sign = callback.data.split("_")[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
        if await payment_service.process_payment(callback.from_user.id, "weekly_horoscope"):
            db.log_request(callback.from_user.id, "weekly_horoscope")
            
            await callback.message.edit_text(
                f"üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è <b>{zodiac_sign}</b>..."
            )
            
            try:
                weekly_horoscope = await gemini_service.generate_weekly_horoscope(zodiac_sign)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                header = f"üìÖ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}</b>\n\n"
                footer = "\n\n<i>–£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ (100 –∑–≤—ë–∑–¥)</i>"
                
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                first_part = header + weekly_horoscope[:4000 - len(header + footer)] + footer
                await callback.message.edit_text(first_part)
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                if len(weekly_horoscope) > 4000:
                    remaining_text = weekly_horoscope[4000 - len(header + footer):]
                    message_parts = split_message(remaining_text, 4000)
                    
                    for part in message_parts:
                        await callback.message.answer(part)
                
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        else:
            await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_weekly_horoscope: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    await callback.answer()

@router.message(F.text == "üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ (80 –∑–≤—ë–∑–¥)")
async def tarot_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ"""
    try:
        await message.answer(
            "üÉè <b>–†–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ</b>\n\n"
            "–Ø –ø–µ—Ä–µ–º–µ—à–∞—é –∫–æ–ª–æ–¥—É –∏ –≤—ã—Ç—è–Ω—É –∫–∞—Ä—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:",
            reply_markup=tarot_spreads_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ tarot_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("tarot_"))
async def process_tarot_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ"""
    try:
        spread_type = callback.data.split("_")[1]
        
        spread_names = {
            "celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            "three": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã", 
            "four": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 4 –∫–∞—Ä—Ç—ã",
            "daily": "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
        }
        
        spread_name = spread_names.get(spread_type, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
        if await payment_service.process_payment(callback.from_user.id, "tarot_reading"):
            db.log_request(callback.from_user.id, f"tarot_{spread_type}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∞—Å–æ–≤–∞–Ω–∏—è
            await callback.message.edit_text(
                f"üÉè –ì–æ—Ç–æ–≤–ª—é –∫–æ–ª–æ–¥—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ '{spread_name}'...\n\n"
                "<em>–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–∞—Ä—Ç—ã...</em>"
            )
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
                cards, positions = tarot_deck.create_spread(spread_type)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cards_display = tarot_deck.format_spread_for_display(cards)
                await callback.message.edit_text(cards_display)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ Gemini
                await callback.message.answer(
                    "üß† <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞...</b>\n\n"
                    "<em>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</em>"
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
                spread_description = create_tarot_prompt(spread_type, cards, positions)
                tarot_reading = await gemini_service.generate_tarot_reading(spread_type, spread_description)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
                interpretation_header = f"üîÆ <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ '{spread_name}'</b>\n\n"
                full_interpretation = interpretation_header + tarot_reading + "\n\n<i>–£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ (80 –∑–≤—ë–∑–¥)</i>"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                message_parts = split_message(full_interpretation, 4000)
                for part in message_parts:
                    await callback.message.answer(part)
                
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {str(e)}")
        else:
            await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_tarot_spread: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    await callback.answer()

def create_tarot_prompt(spread_type, cards, positions):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç"""
    
    spread_descriptions = {
        "celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –µ–µ —Ä–∞–∑–≤–∏—Ç–∏—è",
        "three": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã: –ü—Ä–æ—à–ª–æ–µ, –ù–∞—Å—Ç–æ—è—â–µ–µ, –ë—É–¥—É—â–µ–µ",
        "four": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç—ã—Ä–µ –∫–∞—Ä—Ç—ã: –°–∏—Ç—É–∞—Ü–∏—è, –í—ã–∑–æ–≤—ã, –°–æ–≤–µ—Ç, –†–µ–∑—É–ª—å—Ç–∞—Ç", 
        "daily": "–ö–∞—Ä—Ç–∞ –¥–Ω—è - —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"
    }
    
    prompt = f"""
    –ü—Ä–æ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ: {spread_descriptions.get(spread_type, spread_type)}
    
    –í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏:
    """
    
    for i, card in enumerate(cards):
        position = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
        orientation = "–ø—Ä—è–º–æ–µ" if card["position"] == "upright" else "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ"
        prompt += f"\n- {position}: {card['name']} ({orientation} –ø–æ–ª–æ–∂–µ–Ω–∏–µ)"
        if "upright" in card:
            prompt += f" - {card['upright'] if card['position'] == 'upright' else card['reversed']}"
    
    prompt += """
    
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
    1. –û–±—â—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —Ä–∞—Å–∫–ª–∞–¥–∞
    2. –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –µ–µ –ø–æ–∑–∏—Ü–∏–∏
    3. –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
    4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏
    
    –ë—É–¥—å –º—É–¥—Ä—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. –ò–∑–±–µ–≥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
    –û–±—ä–µ–º: 300-400 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """
    
    return prompt

@router.message(F.text == "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (200 –∑–≤—ë–∑–¥)")
async def natal_chart_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        await message.answer(
            "üåå <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
            "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n"
            "1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú)\n" 
            "3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞)\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        await state.set_state(NatalChartStates.waiting_birth_date)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ natal_chart_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(NatalChartStates.waiting_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not validate_date_format(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990):")
        return

    await state.update_data(birth_date=birth_date)
    await state.set_state(NatalChartStates.waiting_birth_time)
    await message.answer("‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

@router.message(NatalChartStates.waiting_birth_time)
async def process_birth_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_time = message.text.strip()
    if not validate_time_format(birth_time):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        return

    await state.update_data(birth_time=birth_time)
    await state.set_state(NatalChartStates.waiting_birth_place)
    await message.answer("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞):")

@router.message(NatalChartStates.waiting_birth_place)
async def process_birth_place(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    birth_place = message.text.strip()
    if not birth_place:
        await message.answer("‚ùå –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")
        return

    user_data = await state.get_data()
    birth_date = user_data.get('birth_date')
    birth_time = user_data.get('birth_time')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
    if await payment_service.process_payment(message.from_user.id, "natal_chart"):
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        db.log_request(message.from_user.id, "natal_chart")
        
        generating_msg = await message.answer(
            f"üåå –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...\n\n"
            f"<em>–î–∞—Ç–∞: {birth_date}\n"
            f"–í—Ä–µ–º—è: {birth_time}\n"
            f"–ú–µ—Å—Ç–æ: {birth_place}</em>\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        try:
            natal_chart_text = await gemini_service.generate_natal_chart_interpretation({
                'birth_date': birth_date,
                'birth_time': birth_time,
                'birth_place': birth_place
            })
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            header = (
                f"üåå <b>–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
                f"<b>–î–∞–Ω–Ω—ã–µ:</b>\n"
                f"üìÖ –î–∞—Ç–∞: {birth_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {birth_time}\n"
                f"üìç –ú–µ—Å—Ç–æ: {birth_place}\n\n"
            )
            footer = "\n\n<i>–£—Å–ª—É–≥–∞ –æ–ø–ª–∞—á–µ–Ω–∞ (200 –∑–≤—ë–∑–¥)</i>"
            
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            first_part = header + natal_chart_text[:4000 - len(header + footer)] + footer
            await generating_msg.edit_text(first_part)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            if len(natal_chart_text) > 4000:
                remaining_text = natal_chart_text[4000 - len(header + footer):]
                message_parts = split_message(remaining_text, 4000)
                
                for part in message_parts:
                    await message.answer(part)
            
        except Exception as e:
            error_text = (
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.\n\n"
                f"<em>–û—à–∏–±–∫–∞: {str(e)}</em>\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã."
            )
            await generating_msg.edit_text(error_text)
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 200 Telegram Stars.\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    await state.clear()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def validate_date_format(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    try:
        parts = date_str.split('.')
        if len(parts) != 3:
            return False
        day, month, year = parts
        if len(day) != 2 or len(month) != 2 or len(year) != 4:
            return False
        int(day), int(month), int(year)
        return True
    except:
        return False

def validate_time_format(time_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        parts = time_str.split(':')
        if len(parts) != 2:
            return False
        hour, minute = parts
        if len(hour) != 2 or len(minute) != 2:
            return False
        h, m = int(hour), int(minute)
        if h < 0 or h > 23 or m < 0 or m > 59:
            return False
        return True
    except:
        return False