import logging
from typing import Dict

logger = logging.getLogger(__name__)

class FallbackService:
    def __init__(self):
        self.horoscope_templates = {
            "Овен": "Сегодня у Овнов может быть много энергии. Используйте ее для решения важных задач.",
            "Телец": "Тельцам сегодня стоит сосредоточиться на финансовых вопросах. Будьте практичны.",
            "Близнецы": "Близнецам сегодня будет легко общаться. Используйте это для установления связей.",
            "Рак": "Ракам сегодня нужно позаботиться о своем эмоциональном состоянии. Отдых важен.",
            "Лев": "Львы сегодня могут быть в центре внимания. Используйте это для продвижения своих идей.",
            "Дева": "Девы сегодня будут склонны к анализу. Это хороший день для планирования.",
            "Весы": "Весам сегодня важно искать баланс во всем. Избегайте крайностей.",
            "Скорпион": "Скорпионы сегодня могут ощутить прилив страсти. Направьте ее в творческое русло.",
            "Стрелец": "Стрельцы сегодня могут почувствовать желание путешествовать. Ищите новые впечатления.",
            "Козерог": "Козероги сегодня должны сосредоточиться на карьере. Дисциплина приведет к успеху.",
            "Водолей": "Водолеи сегодня могут придумать гениальную идею. Запишите ее.",
            "Рыбы": "Рыбам сегодня стоит прислушаться к интуиции. Она подскажет верный путь."
        }

    def generate_horoscope(self, zodiac_sign: str, period: str = "сегодня") -> str:
        """Генерация гороскопа из шаблонов"""
        template = self.horoscope_templates.get(zodiac_sign, "Сегодня хороший день, чтобы прислушаться к себе.")
        return f"♈ Гороскоп для {zodiac_sign} на {period}:\n\n{template}"

    def generate_compatibility(self, sign1: str, sign2: str) -> str:
        """Генерация совместимости из шаблонов"""
        compatibility_text = f"Совместимость между {sign1} и {sign2}: \n\n"
        compatibility_text += "Эта пара имеет потенциал для гармоничных отношений. Постарайтесь понять друг друга и идти на компромиссы."
        return compatibility_text

fallback_service = FallbackService()