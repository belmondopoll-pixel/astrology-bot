# services/stars_payment_service.py
import logging
from typing import Dict, Optional
from aiogram.types import LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from database import db

logger = logging.getLogger(__name__)

class StarsPaymentService:
    def __init__(self):
        self.service_prices = {
            "compatibility": 55,
            "weekly_horoscope": 333,
            "tarot": 888,
            "natal": 999
        }

    def get_invoice(self, service_type: str, user_data: Dict = None) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Stars"""
        service_info = {
            "compatibility": {
                "title": "üíë –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                "description": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞"
            },
            "weekly_horoscope": {
                "title": "üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é", 
                "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 7 –¥–Ω–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏"
            },
            "tarot": {
                "title": "üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ",
                "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π"
            },
            "natal": {
                "title": "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
                "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º"
            }
        }
        
        info = service_info.get(service_type, {})
        price = self.service_prices.get(service_type, 0)
        
        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        payload_parts = [service_type]
        if user_data:
            if user_data.get('zodiac_sign'):
                payload_parts.append(user_data['zodiac_sign'])
            if user_data.get('first_sign'):
                payload_parts.append(user_data['first_sign'])
            if user_data.get('second_sign'):
                payload_parts.append(user_data['second_sign'])
            if user_data.get('spread_type'):
                payload_parts.append(user_data['spread_type'])
        
        payload = "_".join(payload_parts)
        
        return {
            "title": info.get("title", "–£—Å–ª—É–≥–∞"),
            "description": info.get("description", ""),
            "payload": payload,
            "currency": "XTR",
            "prices": [LabeledPrice(label=info.get("title", "–£—Å–ª—É–≥–∞"), amount=price)],
            "start_parameter": service_type
        }

    async def process_successful_payment(self, user_id: int, payload: str, total_amount: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º payload –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
            parts = payload.split("_")
            service_type = parts[0]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO payments (user_id, service_type, amount_stars, status)
                    VALUES (?, ?, ?, 'completed')
                ''', (user_id, service_type, total_amount))
                conn.commit()

            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {user_id} -> {service_type} –∑–∞ {total_amount} Stars")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    def get_service_price(self, service_type: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏"""
        return self.service_prices.get(service_type, 0)

stars_payment_service = StarsPaymentService()
