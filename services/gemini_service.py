import logging
import google.generativeai as genai
from config import GEMINI_API_KEY

logger = logging.getLogger(__name__)

class GeminiService:
    def __init__(self):
        if not GEMINI_API_KEY:
            raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        genai.configure(api_key=GEMINI_API_KEY)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞
        self.model_priority = [
            'gemini-2.0-flash-001',           # –û—Å–Ω–æ–≤–Ω–∞—è - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            'gemini-2.0-flash',               # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
            'gemini-2.0-flash-lite-001',      # –≠–∫–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è
            'gemini-2.0-flash-exp',           # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è
            'gemini-2.5-flash',               # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            'gemini-2.5-flash-preview-05-20', # –ü—Ä–µ–º–∏—É–º
        ]
        
        self.model = None
        self.model_name = None
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª—è–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        for model_name in self.model_priority:
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {model_name}")
                self.model = genai.GenerativeModel(model_name)
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                test_response = self.model.generate_content(
                    "–¢–µ—Å—Ç", 
                    generation_config=genai.types.GenerationConfig(max_output_tokens=50)
                )
                
                self.model_name = model_name
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
                break
                
            except Exception as e:
                logger.warning(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                continue
        
        if self.model is None:
            logger.error("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Gemini
            self.model = None
            self.model_name = "none"

    async def generate_horoscope(self, zodiac_sign: str, period: str = "—Å–µ–≥–æ–¥–Ω—è") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —á–µ—Ä–µ–∑ Gemini"""
        if self.model is None:
            return await self._get_fallback_horoscope(zodiac_sign, period)
            
        prompt = f"""
        –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {zodiac_sign} –Ω–∞ {period}.
        –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. –û–±—ä–µ–º: 100-150 —Å–ª–æ–≤.
        –§–æ—Ä–º–∞—Ç:
        - –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è
        - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ  
        - –°–æ–≤–µ—Ç –¥–Ω—è
        - –ß—Ç–æ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å
        
        –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        try:
            response = await self._make_request(prompt)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
            return await self._get_fallback_horoscope(zodiac_sign, period)

    async def generate_compatibility(self, sign1: str, sign2: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if self.model is None:
            from .fallback_service import fallback_service
            return fallback_service.generate_compatibility(sign1, sign2)
            
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –∑–Ω–∞–∫–∞–º–∏ {sign1} –∏ {sign2}.
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞:
        1. –û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã
        2. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        3. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤ –¥—Ä—É–∂–±–µ
        4. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ –∏ –±–∏–∑–Ω–µ—Å–µ
        5. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ—é–∑–∞
        6. –í–æ–∑–º–æ–∂–Ω—ã–µ challenges
        7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        
        –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, —Ç–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
        –û–±—ä–µ–º: 250-300 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        try:
            response = await self._make_request(prompt)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            from .fallback_service import fallback_service
            return fallback_service.generate_compatibility(sign1, sign2)

    async def generate_weekly_horoscope(self, zodiac_sign: str, user_data: dict = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if self.model is None:
            from .fallback_service import fallback_service
            return f"""
üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}

{fallback_service.generate_horoscope(zodiac_sign, "–Ω–µ–¥–µ–ª—é")}

<em>–°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.</em>
"""
        
        user_context = ""
        if user_data:
            user_context = f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_data}"
        
        prompt = f"""
        –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac_sign}.
        {user_context}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        - –û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏
        - –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ –¥–Ω—è–º (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ):
          * –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è
          * –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          * –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
          * –°–æ–≤–µ—Ç –¥–Ω—è
        - –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
        
        –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –û–±—ä–µ–º: 400-500 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        try:
            response = await self._make_request(prompt)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
            from .fallback_service import fallback_service
            return f"""
üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {zodiac_sign}

{fallback_service.generate_horoscope(zodiac_sign, "–Ω–µ–¥–µ–ª—é")}

<em>–°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.</em>
"""

    async def generate_natal_chart_interpretation(self, birth_data: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        if self.model is None:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
        prompt = f"""
        –ö–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:
        - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_data.get('birth_date')}
        - –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_data.get('birth_time')}
        - –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_data.get('birth_place')}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞:
        1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
        2. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–ª–∞–Ω—Ç—ã
        3. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
        4. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞
        5. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        6. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
        7. –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É
        
        –ë—É–¥—å –≥–ª—É–±–æ–∫–∏–º, —Ç–∞–∫—Ç–∏—á–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. –û–±—ä–µ–º: 500-600 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        try:
            response = await self._make_request(prompt)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."

    async def generate_tarot_reading(self, spread_type: str, question: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ"""
        if self.model is None:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
        spreads = {
            "celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
            "three": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã - –ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ",
            "four": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 4 –∫–∞—Ä—Ç—ã - —Å–∏—Ç—É–∞—Ü–∏—è, –≤—ã–∑–æ–≤—ã, —Å–æ–≤–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "daily": "–ö–∞—Ä—Ç–∞ –¥–Ω—è - —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"
        }
        
        spread_description = spreads.get(spread_type, spread_type)
        
        prompt = f"""
        –ö–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ: {spread_description}
        {"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + question if question else "–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ insight"}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:
        - –û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
        - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ
        - –°–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Ç—É–∞—Ü–∏–∏
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π
        - –î—É—Ö–æ–≤–Ω—ã–µ —É—Ä–æ–∫–∏
        
        –ë—É–¥—å –º—É–¥—Ä—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –∏–∑–±–µ–≥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
        –û–±—ä–µ–º: 300-400 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        try:
            response = await self._make_request(prompt)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def _make_request(self, prompt: str) -> str:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini"""
        try:
            response = self.model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.7,
                    top_p=0.8,
                    max_output_tokens=1500
                )
            )
            return response.text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {e}")
            raise

    async def _get_fallback_horoscope(self, zodiac_sign: str, period: str) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API"""
        from .fallback_service import fallback_service
        return fallback_service.generate_horoscope(zodiac_sign, period)

    async def safe_generate_horoscope(self, zodiac_sign: str, period: str = "—Å–µ–≥–æ–¥–Ω—è") -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º"""
        try:
            return await self.generate_horoscope(zodiac_sign, period)
        except Exception as e:
            logger.error(f"Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {e}")
            from .fallback_service import fallback_service
            return fallback_service.generate_horoscope(zodiac_sign, period)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
gemini_service = GeminiService()