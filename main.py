# main.py
import asyncio
import logging
import os
import sys

# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –°–ê–ú–û–ô –ü–ï–†–í–û–ô –°–¢–†–û–ö–û–ô –ö–û–î–ê
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

# –°–û–ó–î–ê–ï–ú –õ–û–ì–ì–ï–† –°–†–ê–ó–£ –ü–û–°–õ–ï –ù–ê–°–¢–†–û–ô–ö–ò
logger = logging.getLogger(__name__)

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    sys.path.append(os.path.dirname(__file__))
    logger.info(f"‚úÖ Python path: {sys.path}")

def import_modules():
    """–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info("üîÑ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        
        from config import BOT_TOKEN, GEMINI_API_KEY, ADMIN_ID
        from database import db
        from handlers import main_router
        
        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return BOT_TOKEN, db, main_router
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        sys.exit(1)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    setup_environment()
    BOT_TOKEN, db, main_router = import_modules()
    
    if not BOT_TOKEN or BOT_TOKEN == "–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞":
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return

    try:
        from aiogram import Bot, Dispatcher
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
        dp.include_router(main_router)
        
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")