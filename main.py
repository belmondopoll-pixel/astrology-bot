import asyncio
import logging
import os
import sys
from datetime import datetime

sys.path.append(os.path.dirname(__file__))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramNetworkError, TelegramRetryAfter

try:
    from config import BOT_TOKEN
    from database import db
    from handlers.user_handlers import router
    from api.server import miniapp_api  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'bot_{datetime.now().strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    retry_count = 0
    max_retries = 5
    
    while retry_count < max_retries:
        try:
            if not BOT_TOKEN or BOT_TOKEN == "–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞":
                logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            dp = Dispatcher()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
            dp.include_router(router)
            
            # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
            asyncio.create_task(miniapp_api.start())
            logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            await bot.delete_webhook(drop_pending_updates=True)
            await dp.start_polling(bot)
            
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Telegram. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫.")
            await asyncio.sleep(retry_after)
            retry_count += 1
            
        except TelegramNetworkError as e:
            retry_count += 1
            wait_time = 2 ** retry_count
            logger.warning(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}. –ñ–¥–µ–º {wait_time} —Å–µ–∫.: {e}")
            
            if retry_count < max_retries:
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}). –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            retry_count += 1
            wait_time = min(30, 5 * retry_count)
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫. (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
            await asyncio.sleep(wait_time)
            
        finally:
            if 'bot' in locals():
                await bot.session.close()
                
    logger.error("‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")