import asyncio
import sqlite3
import google.generativeai as genai
import os
from dotenv import load_dotenv

async def full_check():
    print("üîß –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")
    load_dotenv()
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    
    if BOT_TOKEN and BOT_TOKEN != "–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞":
        print("‚úÖ BOT_TOKEN: –ù–ê–ô–î–ï–ù")
    else:
        print("‚ùå BOT_TOKEN: –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    if GEMINI_API_KEY and GEMINI_API_KEY != "–≤–∞—à_gemini_api_–∫–ª—é—á":
        print("‚úÖ GEMINI_API_KEY: –ù–ê–ô–î–ï–ù")
    else:
        print("‚ùå GEMINI_API_KEY: –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        conn = sqlite3.connect('zodiac_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK ({len(tables)} —Ç–∞–±–ª–∏—Ü)")
        for table in tables:
            print(f"   - {table[0]}")
        conn.close()
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Gemini
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Gemini API...")
    if GEMINI_API_KEY:
        try:
            genai.configure(api_key=GEMINI_API_KEY)
            model = genai.GenerativeModel('gemini-2.0-flash-001')
            response = model.generate_content("–ù–∞–ø–∏—à–∏ '–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω' –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
            print("‚úÖ Gemini API: –†–ê–ë–û–¢–ê–ï–¢")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"‚ùå Gemini API: {e}")
    else:
        print("‚ö†Ô∏è Gemini API: –ü—Ä–æ–ø—É—Å–∫ (–Ω–µ—Ç API –∫–ª—é—á–∞)")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    required_files = [
        'main.py', 'config.py', 'database.py', 'keyboards.py',
        'handlers/user_handlers.py', 'handlers/paid_services.py',
        'services/gemini_service.py', 'services/payment_service.py'
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}: –ù–ê–ô–î–ï–ù")
        else:
            print(f"‚ùå {file}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_files.append(file)
    
    if missing_files:
        print(f"\nüí• –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {len(missing_files)}")
        for file in missing_files:
            print(f"   - {file}")
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    
    print("\n" + "=" * 60)
    print("üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(full_check())